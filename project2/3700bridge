#!/usr/bin/python -u    
# The -u makes output unbuffered, so it will show up immediately
import sys
import socket
import select
import json
import time

# pads the name with null bytes at the end
def pad(name):
        result = '\0' + name
        while len(result) < 108:
                result += '\0'
        return result

def packet(dest, form, message):
	packet = {'source': id, 'dest': dest, 'type':form, 'message':message}
	return str(json.dumps(packet))

def send_bpdu(sockets):
		message = {'id': id, 'root': root, 'cost': cost}
		for x in sockets:
			if x != root_port:
				p = packet(x.getpeername(), 'bpdu', str(json.dumps(message)))
				x.sendall(p)
				#print p

def read_packet(data, port):
	print data
	data = json.loads(data)
	if data['type'] == 'bpdu':
		print data
		return read_bpdu(json.loads(data['message']), port)
	
def read_bpdu(data, port):
	global cost, root, root_port
	d_root = data['root']
	d_cost = data['cost']
	if (d_cost == cost and int(d_root, 16) < int(root, 16)) or (d_cost < cost):
		root = d_root
		cost = d_cost + 1
		root_port = port
		print "New root: " + id + "/" + root
		send_bpdu(sockets)
			
 
if __name__ == "__main__":
        id = sys.argv[1]
        LAN = sys.argv[2:]
        sockets = []
	root = id
	cost = 0
	root_port = None

        # creates sockets and connects to them
        for x in range(len(LAN)):
                s = socket.socket(socket.AF_UNIX, socket.SOCK_SEQPACKET)
                s.connect(pad(LAN[x]))
                sockets.append(s)
        
        
        print "Bridge " + id + " starting up\n"
 
        # Main loop
	t = time.time()
        while True:
                # Calls select with all the sockets; change the timeout value (1)
                ready, ignore, ignore2 = select.select(sockets, [], [], 1)
		 
		# Reads from each of the ready sockets
                for x in ready:
                        data = x.recv(1500)
			read_packet(data, x)

		if (time.time() - t) > 0.5:
			send_bpdu(ready)
			t = time.time()
