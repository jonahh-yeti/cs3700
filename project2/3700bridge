#!/usr/bin/python -u
# The -u makes output unbuffered, so it will show up immediately
import sys
import socket
import select
import json
import time


# Pads the name with null bytes at the end
def pad(name):
	result = '\0' + name
	while len(result) < 108:
		result += '\0'
	return result

# GET PORT ID FOR A PORT
def port_id(port):
	return sockets.index(port)
	
# PRINT DESIG PORTS AND ROOT PORTS
def print_ports():
	s = "DESIGNATED: "
	for port in designated_ports:
		s = s + " " + str(port_id(port))
	if root_port:
		s = s + "\nROOT: " + str(port_id(root_port))
	else:
		s = s + "\nROOT: None"
	print s

# Create a JSON string representation of a packet
def packet(source, dest, form, message):
	packet = {'source': source, 'dest': dest, 'type':form, 'message':message}
	return packet

# RETURN PORT ID A PACKET WAS SENT ON
def get_sent_port(packet):
	s = packet['source']
	return s[s.find('/')+1:]
	
# Send a BPDU packet
def send_bpdu():
	global t
	message = {'id': id, 'root': root, 'cost': cost}
	# Calls select with all the sockets; change the timeout value (1)
	read, write, ignore2 = select.select(sockets, sockets, [], 0.1)
	for x in write:
		port_num = port_id(x)
		# Create and send the BPDU JSON packet
		p = packet(id + "/" + str(port_num), 'ffff', 'bpdu', message)
		if port_num not in BPDUs:
			BPDUs[port_num] = (p, time.time)
		else:	
			better = comp_bpdu(BPDUs[port_num][0], p)
			if better:
				temp = better.copy()
				BPDUs[port_num] = (temp, time.time())
		x.sendall(str(json.dumps(p)))
	t = time.time()


# Send a message to all sockets
def send_message(ports_to_send, message):
	# Calls select with all the sockets; change the timeout value (1)
	read, write, ignore2 = select.select(ports_to_send, ports_to_send, [], 0.1)
	for x in write:
		x.sendall(message)


# Determine the type of a packet and read the data
def read_packet(data, port):
	data = json.loads(data)
	if data['type'] == 'bpdu':
		# The packet is a BPDU packet
		return read_bpdu(data['message'], data, port)
	elif data['type'] == 'data':
		# The packet is of some other type
		return process_data(data, port)


# Process a non-BPDU packet
def process_data(data, port):
	global forwarding_table
	if port in designated_ports or port == root_port:
		print "Received message " + str(data['message']['id']) + " on port " + str(port_id(port)) + " from " + data['source'] + " to " + data['dest']
		if data['source'] not in forwarding_table:
			# Create a forwarding table entry for the source of the packet if one does not already exist
			forwarding_table[data['source']] = (port, time.time())
		if data['dest'] in forwarding_table:
			if forwarding_table[data['dest']][0] == port:
				forwarding_table[data['dest']] = (port, time.time())
			# If the destination of the packet is in the forwarding table, send to proper port
			print "Forwarding message " + str(data['message']['id']) + " to port " + str(port_id(port))
			send_to = [forwarding_table[data['dest']][0]]
			if port not in send_to:
				send_message(send_to, str(json.dumps(data)))
		else:
			# If the destination of the packet is NOT in the forwarding table, send to designated port and root port
			ports_to_send = list(designated_ports) + [root_port] if root_port is not None else list(designated_ports)
			if port in ports_to_send:
				ports_to_send.remove(port)
			print "Broadcasting message " + str(data['message']['id']) + " to all ports"
			send_message(ports_to_send, str(json.dumps(data)))

# Designate given port at given port_num
def designate_port(port):
	global designated_ports, forwarding_table
	if port not in designated_ports and port != root_port:
		designated_ports.append(port)
		print("Designated port: " + id + "/" + str(port_id(port)))
		# Flush the forwarding table
		forwarding_table.clear()
	# for x in designated_ports:
		# if x != port and x.getpeername() == port.getpeername():
			# disable_port(x)


# Disable given port at given port_num		
def disable_port(port):
	global designated_ports
	if port in designated_ports:
		designated_ports.remove(port)
		print("Disabled port: " + id + "/" + str(port_id(port)))
	# Flush the forwarding table
	forwarding_table.clear()

def change_root(port, new_root, new_cost):
	global root_port, root, cost
	if new_root:
		root = new_root
		print "New root: " + id + "/" + root
	if new_cost:
		cost = new_cost
	root_port = port
	disable_port(port)
	print "Root port: " + id + "/" + str(port_id(port))
	forwarding_table.clear()
	send_bpdu()

# Compare two BPDUs, return the second if it's better, otherwise return None
def comp_bpdu(packet1, packet2):
	data1 = packet1['message']
	data2 = packet2['message']
	
	if int(data2['root'], 16) < int(data1['root'], 16):
		return packet2
	if int(data2['root'], 16) == int(data1['root'], 16):
		if data2['cost'] < data1['cost']:
			return packet2
		if data2['cost'] == data1['cost'] and int(packet2['source'].split("/")[0], 16) <= int(packet1['source'].split("/")[0], 16):
			return packet2
	return None
	
# Read the BPDU packet and take neccesary actions
def read_bpdu(data, packet, port):
	global cost, root, root_port, designated_ports, forwarding_table, BPDUs
	port_num = port_id(port)

	if port_num in BPDUs:
		better = comp_bpdu(BPDUs[port_num][0], packet)
		if better:
			temp = better.copy()
			BPDUs[port_num] = (better, time.time())
	else:
		temp = packet.copy()
		BPDUs[port_num] = (temp, time.time())
	
	handle_bpdu(BPDUs[port_num][0], port)



def handle_bpdu(packet, port):
	data = packet['message']
	
	# found a root with lower ID
	if int(data['root'], 16) < int(root, 16):
		change_root(port, data['root'], data['cost']+1)		
	# bpdu agrees on root id
	elif int(data['root'], 16) == int(root, 16):
		# using this port would give us a lower cost
		if data['cost'] + 1 < cost:
			change_root(port, None, data['cost']+1)
		# other BPDU gives a better path to root for hosts on the LAN
		elif data['cost'] < cost:
			disable_port(port)
		# this bridge provides a better path to root for hosts on the LAN
		elif data['cost'] > cost:
			designate_port(port)
		# other BPDU has equal cost to ours
		elif data['cost'] == cost:
			# their bridge ID is lower, they should be the designated bridge for the LAN
			if int(data['id'], 16) < int(id, 16):
				disable_port(port)
			# our bridge ID is lower, we should be designated bridge for the LAN
			elif int(data['id'], 16) > int(id, 16):
				designate_port(port)
			# BPDU came from us, fix it
			else:
				sent_port = int(get_sent_port(packet))
				received_port = int(port_id(port))
				# sent out on lower port id, disable receiver
				if sent_port < received_port and sockets[received_port] in designated_ports:
					disable_port(port)
				# received on lower port id, disable sender
				elif sent_port > received_port and port in designated_ports:
					disable_port(sockets[sent_port])
	print_ports()

def timeouts():
	# Timeout forwarding table entries after five seconds
	for key in forwarding_table.keys():
		if time.time() - forwarding_table[key][1] > 5:
			del forwarding_table[key]
			
	# Timeout BPDUs if not refreshed after .750 seconds
	for key in BPDUs.keys():
		if time.time() - BPDUs[key][1] > 0.75:
			cost = 0
			root = id
			root_port = None
			forwarding_table = dict()
			BPDUs = dict()
			designated_ports = list(sockets)
			send_bpdu()

if __name__ == "__main__":
	# Global variables ---
	# ID of this bridge
	id = sys.argv[1]
	# IDs of rest of LAN
	LAN = sys.argv[2:]
	# List of sockets
	sockets = []
	# ID of root node for this bridge (Defaults to this bridge)
	root = id
	# Number of leaps to root (Defaults to zero)
	cost = 0
	# Port that connects to the current root node (Defaults to this bridge, None)
	root_port = None
	# List representing the bridge forwarding table
	forwarding_table = dict()
	# Best BPDU for a given port
	BPDUs = dict()

	# Creates sockets and connects to them
	for x in range(len(LAN)):
		s = socket.socket(socket.AF_UNIX, socket.SOCK_SEQPACKET)
		s.connect(pad(LAN[x]))
		sockets.append(s)

	# List of designated ports
	designated_ports = list(sockets)
	print_ports()
	print "Bridge " + id + " starting up"

	# Current time, serves to start a timer
	send_bpdu()
	t = time.time()
	# Main loop
	while True:
		# Calls select with designated sockets; change the timeout value (1)
		ready, ignore, ignore2 = select.select(sockets, [], [], 0.1)
		# Reads from each of the ready sockets
		for x in ready:
			data = x.recv(1500)
			read_packet(data, x)

		# If 500ms has passed, send out BPDUs
		if (time.time() - t) > 0.5:
			send_bpdu()
			# Reset the timer
			t = time.time()

