#!/usr/bin/python -u
#
# CS3700, Spring 2015
# Project 2 Starter Code
#

import sys
import socket
import time
import datetime
import select
import json

def log(string):
  sys.stderr.write(datetime.datetime.now().strftime("%H:%M:%S.%f") + " " + string + "\n")

MSG_SIZE = 1500
TIMEOUT = 30

# Bind to localhost and an ephemeral port
UDP_IP = "127.0.0.1"
UDP_PORT = 0

# Set up the socket
sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM) 
sock.bind((UDP_IP, UDP_PORT))
sock.settimeout(TIMEOUT)

# Get port we bound to
UDP_PORT = sock.getsockname()[1]
log("[bound] " + str(UDP_PORT))

# Our variables
sequence_number = 0
buffer = {}

# Now listen for packets
while True:
  while len(buffer) > 0:
    if sequence_number in buffer.keys():
      data = buffer[sequence_number]
      log("[recv data] " + str(sequence_number) + " (" + str(len(data)) + ") ACCEPTED (in-order)")
      sys.stdout.write(data)
      del buffer[sequence_number]
      sequence_number += len(data)
    else:
      break
	
  result = sock.recvfrom(MSG_SIZE)

  # If nothing is ready, we hit the timeout
  if result:      
    (data, addr) = result
    try:
      decoded = json.loads(data)

      # If the EOF flag is set, exit
      if (decoded['eof']):
        msg = json.dumps({"ack": decoded['sequence'] + len(decoded['data'])})
        log("ABOUT TO SEND EOF ACK " + msg)
        if sock.sendto(msg, addr) < len(msg):
          log("[error] unable to fully send packet")
        else: 
          log("[completed]")
          sys.exit(0)

      # If there is data, we accept it and print it out
      if (decoded['data']):
        # If we receive data, we assume it's in-order
        # You will need to do much more here
        if decoded['sequence'] == sequence_number:
          log("[recv data] " + str(decoded['sequence']) + " (" + str(len(decoded['data'])) + ") ACCEPTED (in-order)")
          sys.stdout.write(decoded['data'])
          
          # Increment our sequence number
          sequence_number += len(decoded['data'])
        elif decoded['sequence'] > sequence_number:
          log("[recv data out of order] adding to buffer " + str(decoded['sequence']))
          buffer[decoded['sequence']] = decoded['data']

      # Send back an ack to the sender
      msg = json.dumps({"ack": decoded['sequence'] + len(decoded['data'])})
      log("ABOUT TO SEND " + msg)
      if sock.sendto(msg, addr) < len(msg):
        log("[error] unable to fully send packet")

    except (ValueError, KeyError, TypeError) as e:
      log("[recv corrupt packet]")
      log(str(e))
      raise e
  else:
    log("[error] timeout")
    sys.exit(-1)
	 
sys.exit(0)
