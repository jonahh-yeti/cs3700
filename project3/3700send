#!/usr/bin/python -u
#
# CS3700, Spring 2015
# Project 2 Starter Code
#

import sys
import socket
import time
import datetime
import select
import json

MSG_SIZE = 1500
DATA_SIZE = 1000
TIMEOUT = 0
SEQUENCE = 0

# Bind to localhost and an ephemeral port
IP_PORT = sys.argv[1]
UDP_IP = IP_PORT[0:IP_PORT.find(":")]
UDP_PORT = int(IP_PORT[IP_PORT.find(":")+1:])
dest = (UDP_IP, UDP_PORT)

# Set up the socket
sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM) 
sock.settimeout(TIMEOUT)

# Our variables
send_window = 1
ssthresh = 32
last_ack = time.time()
sent_packets = {}
rtt_estimate = 0
RTO = .75
ack_counter = 0
ack_timeout = 1
eof_sent = False

def log(string):
  sys.stderr.write(datetime.datetime.now().strftime("%H:%M:%S.%f") + " " + string + "\n")

def send_next_packet(retransmit=False, ret_seq=0):
  global SEQUENCE, last_ack
  if not retransmit:
    data = sys.stdin.read(DATA_SIZE)
  if retransmit or (len(data) > 0):
    # Add data we're sending to unacked data
    if retransmit:
      log("ATTEMPTING RETRANSMISSION")
      msg = sent_packets[ret_seq][0]
    else:
      msg = {"sequence": SEQUENCE, "data": data, "ack": False, "eof": False}
    
    msg_string = json.dumps(msg)
    if sock.sendto(msg_string, dest) < len(msg_string):
      log("[error] unable to fully send packet")
    else:
      if retransmit:
        sent_packets[ret_seq] = (msg, time.time(), False)
      else:
        SEQUENCE += len(data)
        sent_packets[SEQUENCE] = (msg, time.time(), True)
      if len(sent_packets) == 1 and not eof_sent:
        last_ack = time.time()
      log("[send data] " + str(msg['sequence']) + " (" + str(len(msg['data'])) + ")")
    return True
  else:
    return False

# Send first packet
send_next_packet()

def rtt_sample(out_time, ack_time):
  global RTO, rtt_estimate, ack_timeout
  alpha = 0.7
  beta = 1.3
  if (rtt_estimate == 0):
    rtt_estimate = ack_time-out_time
  rtt_estimate = rtt_estimate*alpha + (ack_time-out_time)*(1-alpha)
  RTO = rtt_estimate*beta
  ack_timeout = rtt_estimate*2

# Now read in data, send packets
while True:
  try:
          
    result = sock.recvfrom(MSG_SIZE)
    # if we receive anything, continue
    if result:
      log("RECEIVED PACKET")
      (data, addr) = result
      try:
        decoded = json.loads(data)
          
        # Look at the ack received and process it
        if decoded['ack'] in sent_packets.keys():
          # delete the packet from sent_packets
          rtt_sample(sent_packets[decoded['ack']][1], time.time())
          del sent_packets[decoded['ack']]
          if send_window < ssthresh:
            send_window += 1
          else:
            ack_counter += 1
            if ack_counter == send_window:
              ack_counter = 0
              send_window += 1
          log("[recv ack] " + str(SEQUENCE))
          last_ack = time.time()

      except (ValueError, KeyError, TypeError) as e:
        log(str(e))
        log("[recv corrupt packet]")
    else:
      log("[error] timeout")
      sys.exit(-1)
          
  except:
    pass
    
  # transmit more packets if our window allows it
  if len(sent_packets) < send_window:
      # Try to send next packet; break if no more data
      if (not send_next_packet()) and len(sent_packets) == 0:
        if (not eof_sent):
          log("SENDING EOF")
          msg = {"sequence": SEQUENCE, "data": "", "ack": False, "eof": True}
          sent_packets[SEQUENCE] = (msg, time.time(), True)
          sock.sendto(json.dumps(msg), dest)
          eof_sent = True;
        else:
          break
          
  # Retransmission logic
  if (eof_sent and time.time() - last_ack > 1):
      log("SAFETY QUIT")
      sys.exit(0)
  
  if time.time() - last_ack > ack_timeout:
    last_ack = time.time()
    log("Window timeout, ssthresh: " + str(ssthresh))
    ssthresh = max(ssthresh//2, 1)
    send_window = 1
    
  for seq in sent_packets.keys():
    msg = sent_packets[seq][0]
    to = sent_packets[seq][1]
    if time.time() - to > (RTO * send_window):
      log("REACHED TIMEOUT")
      rtt_sample((time.time() - (rtt_estimate * 1.5)), time.time())
      # didn't receive ack within time frame, retransmit
      if (not send_next_packet(retransmit=True, ret_seq=seq)):
        continue

sys.exit(0)
