#!/usr/bin/python -u
#
# CS3700, Spring 2015
# Project 2 Starter Code
#

import sys
import socket
import time
import datetime
import select
import json

MSG_SIZE = 1500
DATA_SIZE = 1000
TIMEOUT = 0
SEQUENCE = 0

# Bind to localhost and an ephemeral port
IP_PORT = sys.argv[1]
UDP_IP = IP_PORT[0:IP_PORT.find(":")]
UDP_PORT = int(IP_PORT[IP_PORT.find(":")+1:])
dest = (UDP_IP, UDP_PORT)

# Set up the socket
sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM) 
sock.settimeout(TIMEOUT)

# Our variables
send_window = 1
t = time.time()
seq_not_acked = 0
data_not_acked = ""

def log(string):
  sys.stderr.write(datetime.datetime.now().strftime("%H:%M:%S.%f") + " " + string + "\n")

def send_next_packet(retransmit=False):
  global SEQUENCE, data_not_acked, seq_not_acked
  data = ""
  seq = 0
  
  # Retransmission logic: if retransmit=True, use data_not_acked instead of stdin and use seq_not_acked
  if retransmit and len(data_not_acked) == DATA_SIZE:
    log("ATTEMPTING RETRANSMISSION")
    data = data_not_acked
    seq = seq_not_acked
  else:
    data = sys.stdin.read(DATA_SIZE)
    seq = SEQUENCE
    
  if (len(data) > 0):
    # Add data we're sending to unacked data
    msg = json.dumps({"sequence": seq, "data": data, "ack": False, "eof": False})

    if sock.sendto(msg, dest) < len(msg):
      log("[error] unable to fully send packet")
    else:
      if not retransmit:
        data_not_acked = data
        seq_not_acked = SEQUENCE
        SEQUENCE += len(data)
      log("[send data] " + str(seq) + " (" + str(len(data)) + ")")
    return True
  else:
    return False

# Send first packet
send_next_packet()

# Now read in data, send packets
while True:
  try:
    result = sock.recvfrom(MSG_SIZE)
    # if we receive anything, continue
    if result:
      log("RECEIVED PACKET")
      (data, addr) = result
      try:
        decoded = json.loads(data)

        # If there is an ack, send next packet
        if decoded['ack'] == SEQUENCE:
          # Reset t and data_not_acked
          t = time.time()
          data_not_acked = ""
          
          log("[recv ack] " + str(SEQUENCE))

          # Try to send next packet; break if no more data
          if (not send_next_packet()):
            break

      except (ValueError, KeyError, TypeError) as e:
        log(str(e))
        log("[recv corrupt packet]")
    else:
      log("[error] timeout")
      sys.exit(-1)
  except:
      # Retransmission logic
      if time.time() - t > 0.1:
        log("REACHED TIMEOUT")
        # didn't receive ack within time frame, retransmit
        if (not send_next_packet(retransmit=True)):
          t = time.time()
          break
      else:
        continue
      

sock.sendto(json.dumps({"eof": True, "data": "", "sequence": SEQUENCE, "ack": False}), dest)
sys.exit(0)
