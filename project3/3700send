#!/usr/bin/python -u
#
# CS3700, Spring 2015
# Project 2 Starter Code
#

import sys
import socket
import time
import datetime
import select
import json

MSG_SIZE = 1500
DATA_SIZE = 1000
TIMEOUT = 30
SEQUENCE = 0

# Bind to localhost and an ephemeral port
IP_PORT = sys.argv[1]
UDP_IP = IP_PORT[0:IP_PORT.find(":")]
UDP_PORT = int(IP_PORT[IP_PORT.find(":")+1:])
dest = (UDP_IP, UDP_PORT)

# Set up the socket
sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM) 
sock.settimeout(TIMEOUT)

def log(string):
  sys.stderr.write(datetime.datetime.now().strftime("%H:%M:%S.%f") + " " + string + "\n")

def send_next_packet():
  global SEQUENCE, sequences

  data = sys.stdin.read(DATA_SIZE)
  if (len(data) > 0):
    sequences.append(SEQUENCE)
    msg = json.dumps({"sequence": SEQUENCE, "data": data, "ack": False, "eof": False})
    SEQUENCE += len(data)

    if sock.sendto(msg, dest) < len(msg):
      log("[error] unable to fully send packet")
    else:
      log("[send data] " + str(SEQUENCE) + " (" + str(len(data)) + ")")
    return True
  else:
    return False


def processAck(ack):
  global sequences
  del sequences[sequences.index(ack)]


window_size = 1
ack_counter = 0
sequences = []

# Send first packet
send_next_packet()

# Now read in data, send packets
while True:
  log("ABOUT TO SLEEP")
  result = sock.recvfrom(MSG_SIZE)

  if result:
    (data, addr) = result
    try:
      decoded = json.loads(data)

      decoded_ack = decoded['ack']
      # If there is an ack, send next packet
      if decoded_ack in sequences:
        log("[recv ack] " + str(decoded_ack))
        # remove current sequence from sequence list
        processAck(decoded_ack)
        log(str(sequences))

        ack_counter += 1
        if ack_counter == window_size:
          ack_counter = 0
          log('met window size')

          if sequences:
            log("retransmit sequences still present")

          window_size *= 2

          # Try to send next packet; break if no more data
          count = 0
          while count < window_size:
            if (not send_next_packet()):
              break
            count += 1

    except (ValueError, KeyError, TypeError):
      log("[recv corrupt packet]")
  else:
    log("[error] timeout")
    sys.exit(-1)

sock.sendto(json.dumps({"eof": True, "data": "", "sequence": SEQUENCE, "ack": False}), dest)
sys.exit(0)
